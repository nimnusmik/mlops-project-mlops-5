services:
  my-mlops-db:
    image: postgres:13
    container_name: my-mlops-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    networks:
      - my-mlops-network
    volumes:
      - db_data:/var/lib/postgresql/data
   

  my-mlops-redis:
    image: redis:latest
    container_name: my-mlops-redis
    ports:
      - "6379:6379"
    networks:
      - my-mlops-network


  my-mlops:
    build:
      context: ../../
      dockerfile: services/model_inference/dockerfile
    #image: jkim1209/mlops-project:1.2.5
    env_file: # 이 부분 추가합니다.
      - ../../.env
    container_name: my-mlops
    environment:
      DB_HOST: my-mlops-db
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: root
      DB_PORT: 5432

      TMDB_API_KEY: ${TMDB_API_KEY}
      TMDB_BASE_URL: ${TMDB_BASE_URL}

      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    networks:
      - my-mlops-network
    depends_on:
      - my-mlops-db

  mlops-feast:
    build:
      context: ../../
      dockerfile: services/feast/DockerFile
    container_name: mlops-feast
    env_file:
      - ../../.env
    depends_on:
      - my-mlops-db
      - my-mlops-redis
    networks:
      - my-mlops-network
    volumes:
      - ../../:/mlops-project # 루트 폴더를 마운트
    mem_limit: 4g  # 메모리가 죽어서 
    command: tail -f /dev/null
    environment:
        DB_HOST: my-mlops-db
        DB_NAME: postgres
        DB_USER: postgres
        DB_PASSWORD: root
        DB_PORT: 5432

        TMDB_API_KEY: ${TMDB_API_KEY}
        TMDB_BASE_URL: ${TMDB_BASE_URL}

        S3_BUCKET_NAME: ${S3_BUCKET_NAME}
        AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        AWS_REGION: ${AWS_REGION}  

networks:
  my-mlops-network:
    driver: bridge

volumes:
  db_data:
